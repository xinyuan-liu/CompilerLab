//
// Generated by JTB 1.3.2
//

package minijava.syntaxtree;

import java.util.ArrayList;
import java.util.List;

/**
 * Grammar production:
 * f0 -> "class"
 * f1 -> Identifier()
 * f2 -> "{"
 * f3 -> ( VarDeclaration() )*
 * f4 -> ( MethodDeclaration() )*
 * f5 -> "}"
 */
public class ClassDeclaration implements Node {
   public NodeToken f0;
   public Identifier f1;
   public NodeToken f2;
   public NodeListOptional f3;
   public NodeListOptional f4;
   public NodeToken f5;

   public ClassDeclaration(NodeToken n0, Identifier n1, NodeToken n2, NodeListOptional n3, NodeListOptional n4, NodeToken n5) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
   }

   public Identifier getname() {
	   return f1;
   }
   
   public ClassDeclaration(Identifier n0, NodeListOptional n1, NodeListOptional n2) {
      f0 = new NodeToken("class");
      f1 = n0;
      f2 = new NodeToken("{");
      f3 = n1;
      f4 = n2;
      f5 = new NodeToken("}");
   }
   
   public List<MethodDeclaration> getMethod() {
	   if(!f4.present())
		   return null;
	   List<MethodDeclaration>l=new ArrayList<MethodDeclaration>();
	   int len=f4.size();
	   for(int i=0;i<len;i++)
	   {
		   l.add((MethodDeclaration) f4.elementAt(i));
	   }
	   return l;
   }
   
   public List<VarDeclaration> getField() {
	   if(!f3.present())
		   return null;
	   List<VarDeclaration>l=new ArrayList<VarDeclaration>();
	   int len=f3.size();
	   for(int i=0;i<len;i++)
	   {
		   l.add((VarDeclaration) f3.elementAt(i));
	   }
	   return l;
   }
   
   public void accept(minijava.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(minijava.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(minijava.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(minijava.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

